#!/usr/bin/env node

/**
 * Script para testar o sistema de caixa
 * 
 * Testa a cria√ß√£o de uma sess√£o de caixa para verificar se a migra√ß√£o funcionou
 */

import { createClient } from '@supabase/supabase-js';
import { config } from 'dotenv';

// Carregar vari√°veis de ambiente
config({ path: '.env.local' });

const supabaseUrl = process.env.VITE_SUPABASE_URL;
const supabaseKey = process.env.VITE_SUPABASE_ANON_KEY;

if (!supabaseUrl || !supabaseKey) {
  console.error('‚ùå Vari√°veis de ambiente VITE_SUPABASE_URL e VITE_SUPABASE_ANON_KEY s√£o necess√°rias');
  process.exit(1);
}

const supabase = createClient(supabaseUrl, supabaseKey);

async function testCashSystem() {
  console.log('üß™ Testando sistema de caixa...');
  console.log('');

  try {
    // Primeiro, verificar se as tabelas existem
    console.log('1Ô∏è‚É£ Verificando tabelas...');
    
    const { data: tables, error: tablesError } = await supabase
      .from('cash_sessions')
      .select('count')
      .limit(0);

    if (tablesError) {
      console.log('‚ùå Erro ao acessar tabelas:', tablesError.message);
      return;
    }

    console.log('‚úÖ Tabelas acess√≠veis');
    console.log('');

    // Verificar se h√° usu√°rios na tabela profiles
    console.log('2Ô∏è‚É£ Verificando usu√°rios...');
    
    const { data: profiles, error: profilesError } = await supabase
      .from('profiles')
      .select('id, name, role')
      .limit(5);

    if (profilesError) {
      console.log('‚ùå Erro ao acessar profiles:', profilesError.message);
      return;
    }

    console.log(`‚úÖ Encontrados ${profiles?.length || 0} usu√°rios:`);
    profiles?.forEach(profile => {
      console.log(`   - ${profile.name} (${profile.role}) - ID: ${profile.id.substring(0, 8)}...`);
    });
    console.log('');

    // Verificar sess√µes existentes
    console.log('3Ô∏è‚É£ Verificando sess√µes de caixa...');
    
    const { data: sessions, error: sessionsError } = await supabase
      .from('cash_sessions')
      .select('*')
      .limit(5);

    if (sessionsError) {
      console.log('‚ùå Erro ao acessar sess√µes:', sessionsError.message);
      return;
    }

    console.log(`‚úÖ Encontradas ${sessions?.length || 0} sess√µes de caixa:`);
    sessions?.forEach(session => {
      console.log(`   - Funcion√°rio: ${session.employee_id.substring(0, 8)}... | Status: ${session.status} | Data: ${session.session_date}`);
    });
    console.log('');

    // Testar cria√ß√£o de sess√£o (simulado)
    console.log('4Ô∏è‚É£ Testando estrutura de dados...');
    
    if (profiles && profiles.length > 0) {
      const testUserId = profiles[0].id;
      
      // Verificar se j√° existe sess√£o aberta para este usu√°rio
      const { data: existingSession, error: existingError } = await supabase
        .from('cash_sessions')
        .select('*')
        .eq('employee_id', testUserId)
        .eq('status', 'open')
        .maybeSingle();

      if (existingError) {
        console.log('‚ùå Erro ao verificar sess√£o existente:', existingError.message);
        return;
      }

      if (existingSession) {
        console.log(`‚úÖ Usu√°rio ${profiles[0].name} j√° tem uma sess√£o aberta`);
        console.log(`   - ID da sess√£o: ${existingSession.id}`);
        console.log(`   - Valor inicial: R$ ${existingSession.opening_amount}`);
        console.log(`   - Aberta em: ${new Date(existingSession.opened_at).toLocaleString('pt-BR')}`);
      } else {
        console.log(`‚ÑπÔ∏è  Usu√°rio ${profiles[0].name} n√£o tem sess√£o aberta`);
        console.log('   - Pode abrir uma nova sess√£o no sistema');
      }
    } else {
      console.log('‚ö†Ô∏è  Nenhum usu√°rio encontrado na tabela profiles');
      console.log('   - Crie um usu√°rio via autentica√ß√£o do Supabase primeiro');
    }

    console.log('');
    console.log('üéâ Teste conclu√≠do com sucesso!');
    console.log('');
    console.log('üìã Pr√≥ximos passos:');
    console.log('1. Acesse: http://localhost:5175');
    console.log('2. Fa√ßa login no sistema');
    console.log('3. Navegue para o m√≥dulo de Gest√£o de Caixa');
    console.log('4. Teste a abertura de uma sess√£o de caixa');
    console.log('');
    console.log('üí° Dicas:');
    console.log('- Se n√£o conseguir fazer login, crie um usu√°rio no Supabase Auth');
    console.log('- Ap√≥s login, um perfil ser√° criado automaticamente');
    console.log('- O sistema agora est√° conectado √†s tabelas reais do banco');

  } catch (error) {
    console.error('‚ùå Erro durante o teste:', error);
  }
}

testCashSystem();