// Script para configurar riltons@gmail.com como primeiro usu√°rio
// Execute este script no console do Supabase ou via Node.js

import { createClient } from '@supabase/supabase-js';

// ========================================================================
// CONFIGURA√á√ÉO - SUBSTITUA COM SUAS CREDENCIAIS
// ========================================================================

const SUPABASE_URL = 'https://egfkflqhqfqagwzxppdo.supabase.co';
const SUPABASE_SERVICE_KEY = 'SUA_SERVICE_ROLE_KEY_AQUI'; // ‚ö†Ô∏è SUBSTITUA PELA SUA CHAVE

const supabase = createClient(SUPABASE_URL, SUPABASE_SERVICE_KEY);

// ========================================================================
// FUN√á√ÉO PRINCIPAL
// ========================================================================

async function configurarRiltonsComoPrimeiroUsuario() {
    console.log('üöÄ === CONFIGURANDO RILTONS@GMAIL.COM COMO PRIMEIRO USU√ÅRIO ===');
    
    try {
        // Passo 1: Verificar se usu√°rio existe no auth
        console.log('\nüîç Verificando usu√°rio no auth.users...');
        const { data: { users }, error: authError } = await supabase.auth.admin.listUsers();
        
        if (authError) {
            console.error('‚ùå Erro ao listar usu√°rios:', authError);
            return;
        }
        
        const riltonUser = users.find(u => u.email === 'riltons@gmail.com');
        
        if (!riltonUser) {
            console.log('‚ùå Usu√°rio riltons@gmail.com N√ÉO encontrado no auth.users');
            console.log('‚ö†Ô∏è  Crie o usu√°rio no Supabase Auth Dashboard primeiro!');
            return;
        }
        
        console.log(`‚úÖ Usu√°rio encontrado - ID: ${riltonUser.id}`);
        
        // Passo 2: Verificar/criar empresa
        console.log('\nüè¢ Verificando empresa...');
        let { data: empresas, error: empresaError } = await supabase
            .from('empresas')
            .select('*')
            .limit(1);
        
        if (empresaError) {
            console.error('‚ùå Erro ao consultar empresas:', empresaError);
            return;
        }
        
        let empresaId;
        if (!empresas || empresas.length === 0) {
            console.log('üèóÔ∏è  Criando empresa AABB Garanhuns...');
            const { data: novaEmpresa, error: criarEmpresaError } = await supabase
                .from('empresas')
                .insert({
                    nome: 'AABB Garanhuns',
                    cnpj: '12.345.678/0001-90',
                    email_admin: 'riltons@gmail.com',
                    telefone: '(87) 99999-9999',
                    plano: 'premium',
                    status: 'ativo',
                    configuracoes: { tema: 'claro', primeira_configuracao: true }
                })
                .select()
                .single();
            
            if (criarEmpresaError) {
                console.error('‚ùå Erro ao criar empresa:', criarEmpresaError);
                return;
            }
            
            empresaId = novaEmpresa.id;
            console.log(`‚úÖ Empresa criada - ID: ${empresaId}`);
        } else {
            empresaId = empresas[0].id;
            console.log(`‚úÖ Empresa existente - ID: ${empresaId}`);
        }
        
        // Passo 3: Limpar dados existentes para reconfigura√ß√£o
        console.log('\nüßπ Limpando dados existentes...');
        
        // Buscar registro existente
        const { data: usuarioExistente } = await supabase
            .from('usuarios_empresa')
            .select('id')
            .eq('user_id', riltonUser.id)
            .eq('empresa_id', empresaId)
            .single();
        
        // Limpar permiss√µes existentes
        if (usuarioExistente) {
            const { error: deletePermsError } = await supabase
                .from('permissoes_usuario')
                .delete()
                .eq('usuario_empresa_id', usuarioExistente.id);
            
            if (deletePermsError) {
                console.warn('‚ö†Ô∏è  Aviso ao limpar permiss√µes:', deletePermsError.message);
            }
        }
        
        // Limpar configura√ß√µes da empresa
        const { error: deleteConfigsError } = await supabase
            .from('configuracoes_empresa')
            .delete()
            .eq('empresa_id', empresaId);
        
        if (deleteConfigsError) {
            console.warn('‚ö†Ô∏è  Aviso ao limpar configura√ß√µes:', deleteConfigsError.message);
        }
        
        // Limpar logs relacionados
        const { error: deleteLogsError } = await supabase
            .from('logs_auditoria')
            .delete()
            .eq('empresa_id', empresaId)
            .eq('usuario_id', riltonUser.id);
        
        if (deleteLogsError) {
            console.warn('‚ö†Ô∏è  Aviso ao limpar logs:', deleteLogsError.message);
        }
        
        // Remover registro de usuarios_empresa para recriar
        if (usuarioExistente) {
            const { error: deleteUserError } = await supabase
                .from('usuarios_empresa')
                .delete()
                .eq('id', usuarioExistente.id);
            
            if (deleteUserError) {
                console.warn('‚ö†Ô∏è  Aviso ao remover usu√°rio existente:', deleteUserError.message);
            }
        }
        
        console.log('‚úÖ Dados existentes limpos');
        
        // Passo 4: Criar como primeiro usu√°rio (ATIVA TODOS OS TRIGGERS)
        console.log('\nüéØ Criando registro como PRIMEIRO USU√ÅRIO...');
        console.log('üî• ISSO IR√Å ATIVAR TODOS OS TRIGGERS AUTOM√ÅTICOS!');
        
        const { data: novoUsuario, error: criarUsuarioError } = await supabase
            .from('usuarios_empresa')
            .insert({
                user_id: riltonUser.id,
                empresa_id: empresaId,
                nome_completo: 'Rilton Silva',
                email: 'riltons@gmail.com',
                telefone: '(87) 99999-9999',
                cargo: 'Diretor Geral',
                tipo_usuario: 'administrador',
                papel: 'SUPER_ADMIN',
                is_primeiro_usuario: true, // üî• ESTA LINHA ATIVA TODOS OS TRIGGERS
                status: 'ativo',
                senha_provisoria: false
            })
            .select()
            .single();
        
        if (criarUsuarioError) {
            console.error('‚ùå Erro ao criar primeiro usu√°rio:', criarUsuarioError);
            return;
        }
        
        console.log(`üéâ PRIMEIRO USU√ÅRIO CRIADO - ID: ${novoUsuario.id}`);
        console.log('üöÄ Triggers autom√°ticos foram ativados!');
        
        // Passo 5: Aguardar um pouco para os triggers processarem
        console.log('\n‚è≥ Aguardando triggers processarem (2 segundos)...');
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // Passo 6: Verificar resultados
        console.log('\nüìä === VERIFICANDO RESULTADOS DOS TRIGGERS ===');
        
        // Verificar configura√ß√µes criadas
        const { data: configs, error: configsError } = await supabase
            .from('configuracoes_empresa')
            .select('*')
            .eq('empresa_id', empresaId);
        
        if (configsError) {
            console.error('‚ùå Erro ao verificar configura√ß√µes:', configsError);
        } else {
            console.log(`‚öôÔ∏è  Configura√ß√µes criadas: ${configs.length} registros`);
            configs.forEach(config => {
                console.log(`   - ${config.categoria}: ${JSON.stringify(config.configuracoes)}`);
            });
        }
        
        // Verificar permiss√µes criadas
        const { data: perms, error: permsError } = await supabase
            .from('permissoes_usuario')
            .select('*')
            .eq('usuario_empresa_id', novoUsuario.id);
        
        if (permsError) {
            console.error('‚ùå Erro ao verificar permiss√µes:', permsError);
        } else {
            console.log(`üîê Permiss√µes criadas: ${perms.length} registros`);
            perms.forEach(perm => {
                console.log(`   - ${perm.modulo}: ${JSON.stringify(perm.permissoes)}`);
            });
        }
        
        // Verificar logs criados
        const { data: logs, error: logsError } = await supabase
            .from('logs_auditoria')
            .select('*')
            .eq('empresa_id', empresaId)
            .eq('usuario_id', riltonUser.id)
            .eq('acao', 'PRIMEIRO_USUARIO_CRIADO');
        
        if (logsError) {
            console.error('‚ùå Erro ao verificar logs:', logsError);
        } else {
            console.log(`üìù Logs de auditoria criados: ${logs.length} registros`);
            logs.forEach(log => {
                console.log(`   - ${log.acao}: ${JSON.stringify(log.detalhes)}`);
            });
        }
        
        // Resumo final
        const configsOk = configs && configs.length >= 5;
        const permsOk = perms && perms.length >= 10;
        const logsOk = logs && logs.length > 0;
        
        console.log('\n' + '='.repeat(60));
        if (configsOk && permsOk && logsOk) {
            console.log('üéâ === CONFIGURA√á√ÉO CONCLU√çDA COM SUCESSO! ===');
            console.log('‚úÖ riltons@gmail.com configurado como primeiro usu√°rio');
            console.log(`‚úÖ ${configs.length} configura√ß√µes da empresa criadas automaticamente`);
            console.log(`‚úÖ ${perms.length} permiss√µes completas atribu√≠das automaticamente`);
            console.log(`‚úÖ ${logs.length} log(s) de auditoria registrado(s) automaticamente`);
            console.log('üöÄ Todos os triggers autom√°ticos funcionaram corretamente!');
        } else {
            console.log('‚ö†Ô∏è  CONFIGURA√á√ÉO PARCIALMENTE CONCLU√çDA');
            console.log(`- Configura√ß√µes: ${configsOk ? '‚úÖ' : '‚ùå'} (${configs?.length || 0}/5)`);
            console.log(`- Permiss√µes: ${permsOk ? '‚úÖ' : '‚ùå'} (${perms?.length || 0}/10+)`);
            console.log(`- Logs: ${logsOk ? '‚úÖ' : '‚ùå'} (${logs?.length || 0}/1)`);
            console.log('Verifique se os triggers est√£o funcionando corretamente.');
        }
        console.log('='.repeat(60));
        
    } catch (error) {
        console.error('‚ùå Erro geral na configura√ß√£o:', error);
    }
}

// ========================================================================
// EXECUTAR
// ========================================================================

// Verificar se a chave foi configurada
if (SUPABASE_SERVICE_KEY === 'SUA_SERVICE_ROLE_KEY_AQUI') {
    console.log('‚ùå ERRO: Substitua SUA_SERVICE_ROLE_KEY_AQUI pela sua chave real!');
    console.log('‚ö†Ô∏è  Encontre sua Service Role Key no painel do Supabase > Settings > API');
} else {
    // Executar a configura√ß√£o
    configurarRiltonsComoPrimeiroUsuario()
        .then(() => {
            console.log('\n‚úÖ Script conclu√≠do!');
        })
        .catch(error => {
            console.error('\n‚ùå Erro na execu√ß√£o do script:', error);
        });
}