import { PapelUsuario } from '../types/multitenant';\n\ninterface RateLimitConfig {\n  windowMs: number; // Janela de tempo em milliseconds\n  maxRequests: number; // Máximo de requests na janela\n  skipSuccessfulRequests?: boolean;\n  skipFailedRequests?: boolean;\n}\n\ninterface RateLimitEntry {\n  count: number;\n  resetTime: number;\n  blocked: boolean;\n  blockUntil?: number;\n}\n\nclass RateLimitService {\n  private limits: Map<string, RateLimitEntry> = new Map();\n  private configs: Record<PapelUsuario, Record<string, RateLimitConfig>> = {\n    [PapelUsuario.SUPER_ADMIN]: {\n      default: { windowMs: 60000, maxRequests: 1000 },\n      'admin-actions': { windowMs: 60000, maxRequests: 200 },\n      'user-management': { windowMs: 60000, maxRequests: 100 },\n      'system-config': { windowMs: 60000, maxRequests: 50 }\n    },\n    [PapelUsuario.ADMIN]: {\n      default: { windowMs: 60000, maxRequests: 500 },\n      'admin-actions': { windowMs: 60000, maxRequests: 100 },\n      'user-management': { windowMs: 60000, maxRequests: 50 },\n      'company-config': { windowMs: 60000, maxRequests: 30 }\n    },\n    [PapelUsuario.MANAGER]: {\n      default: { windowMs: 60000, maxRequests: 200 },\n      'user-management': { windowMs: 60000, maxRequests: 20 },\n      'reports': { windowMs: 60000, maxRequests: 10 }\n    },\n    [PapelUsuario.USER]: {\n      default: { windowMs: 60000, maxRequests: 100 },\n      'profile-update': { windowMs: 300000, maxRequests: 5 }, // 5 updates per 5 minutes\n      'password-change': { windowMs: 3600000, maxRequests: 3 } // 3 changes per hour\n    }\n  };\n\n  constructor() {\n    // Limpar entradas expiradas a cada minuto\n    setInterval(() => {\n      this.cleanup();\n    }, 60000);\n  }\n\n  /**\n   * Verifica se uma requisição deve ser permitida\n   */\n  checkLimit(\n    userId: string,\n    papel: PapelUsuario,\n    category: string = 'default',\n    ip?: string\n  ): { allowed: boolean; resetTime?: number; remaining?: number } {\n    const config = this.getConfig(papel, category);\n    const key = this.generateKey(userId, category, ip);\n    const now = Date.now();\n    \n    let entry = this.limits.get(key);\n    \n    // Verificar se está bloqueado\n    if (entry?.blocked && entry.blockUntil && now < entry.blockUntil) {\n      return {\n        allowed: false,\n        resetTime: entry.blockUntil\n      };\n    }\n    \n    // Resetar se a janela expirou\n    if (!entry || now >= entry.resetTime) {\n      entry = {\n        count: 1,\n        resetTime: now + config.windowMs,\n        blocked: false\n      };\n      this.limits.set(key, entry);\n      \n      return {\n        allowed: true,\n        resetTime: entry.resetTime,\n        remaining: config.maxRequests - 1\n      };\n    }\n    \n    // Verificar se excedeu o limite\n    if (entry.count >= config.maxRequests) {\n      // Bloquear por tempo adicional se for abuso repetido\n      const blockDuration = this.calculateBlockDuration(userId, category);\n      entry.blocked = true;\n      entry.blockUntil = now + blockDuration;\n      \n      return {\n        allowed: false,\n        resetTime: entry.resetTime\n      };\n    }\n    \n    // Incrementar contador\n    entry.count++;\n    \n    return {\n      allowed: true,\n      resetTime: entry.resetTime,\n      remaining: config.maxRequests - entry.count\n    };\n  }\n\n  /**\n   * Registra uma tentativa de abuso\n   */\n  recordAbuse(userId: string, category: string, severity: 'low' | 'medium' | 'high' = 'medium') {\n    const abuseKey = `abuse_${userId}_${category}`;\n    const now = Date.now();\n    \n    let abuseEntry = this.limits.get(abuseKey);\n    if (!abuseEntry || now >= abuseEntry.resetTime) {\n      abuseEntry = {\n        count: 1,\n        resetTime: now + (24 * 60 * 60 * 1000), // 24 horas\n        blocked: false\n      };\n    } else {\n      abuseEntry.count++;\n    }\n    \n    // Aplicar penalidades baseadas na severidade\n    const penalties = {\n      low: 1,\n      medium: 3,\n      high: 10\n    };\n    \n    abuseEntry.count += penalties[severity];\n    this.limits.set(abuseKey, abuseEntry);\n    \n    // Bloquear se muitas tentativas de abuso\n    if (abuseEntry.count >= 10) {\n      const blockKey = this.generateKey(userId, category);\n      const blockEntry = this.limits.get(blockKey) || {\n        count: 0,\n        resetTime: now,\n        blocked: false\n      };\n      \n      blockEntry.blocked = true;\n      blockEntry.blockUntil = now + (60 * 60 * 1000); // 1 hora\n      this.limits.set(blockKey, blockEntry);\n    }\n  }\n\n  /**\n   * Remove limitações para um usuário (para emergências)\n   */\n  clearLimits(userId: string, category?: string) {\n    if (category) {\n      const key = this.generateKey(userId, category);\n      this.limits.delete(key);\n    } else {\n      // Remover todas as limitações do usuário\n      for (const [key] of this.limits) {\n        if (key.startsWith(`${userId}_`)) {\n          this.limits.delete(key);\n        }\n      }\n    }\n  }\n\n  /**\n   * Obtém estatísticas de uso para um usuário\n   */\n  getUserStats(userId: string): Record<string, { count: number; limit: number; resetTime: number }> {\n    const stats: Record<string, { count: number; limit: number; resetTime: number }> = {};\n    \n    for (const [key, entry] of this.limits) {\n      if (key.startsWith(`${userId}_`)) {\n        const category = key.split('_')[1];\n        stats[category] = {\n          count: entry.count,\n          limit: 0, // Será preenchido abaixo\n          resetTime: entry.resetTime\n        };\n      }\n    }\n    \n    return stats;\n  }\n\n  /**\n   * Atualiza configurações de rate limit para um papel\n   */\n  updateConfig(papel: PapelUsuario, category: string, config: RateLimitConfig) {\n    if (!this.configs[papel]) {\n      this.configs[papel] = {};\n    }\n    this.configs[papel][category] = config;\n  }\n\n  private getConfig(papel: PapelUsuario, category: string): RateLimitConfig {\n    const roleConfigs = this.configs[papel];\n    return roleConfigs?.[category] || roleConfigs?.default || {\n      windowMs: 60000,\n      maxRequests: 100\n    };\n  }\n\n  private generateKey(userId: string, category: string, ip?: string): string {\n    return ip ? `${userId}_${category}_${ip}` : `${userId}_${category}`;\n  }\n\n  private calculateBlockDuration(userId: string, category: string): number {\n    const abuseKey = `abuse_${userId}_${category}`;\n    const abuseEntry = this.limits.get(abuseKey);\n    \n    if (!abuseEntry) {\n      return 5 * 60 * 1000; // 5 minutos para primeira ofensa\n    }\n    \n    // Aumentar duração baseado no histórico de abuso\n    const baseTime = 5 * 60 * 1000; // 5 minutos\n    const multiplier = Math.min(abuseEntry.count, 10); // Máximo 10x\n    \n    return baseTime * multiplier;\n  }\n\n  private cleanup() {\n    const now = Date.now();\n    \n    for (const [key, entry] of this.limits) {\n      // Remover entradas expiradas\n      if (now >= entry.resetTime && (!entry.blockUntil || now >= entry.blockUntil)) {\n        this.limits.delete(key);\n      }\n    }\n  }\n}\n\n// Instância singleton\nexport const rateLimitService = new RateLimitService();\n\n// Middleware factory para Express\nexport const createRateLimitMiddleware = (category: string = 'default') => {\n  return (req: any, res: any, next: any) => {\n    if (!req.user) {\n      return next();\n    }\n\n    const { id: userId, papel } = req.user;\n    const ip = req.ip || req.connection.remoteAddress;\n    \n    const result = rateLimitService.checkLimit(userId, papel, category, ip);\n    \n    if (!result.allowed) {\n      // Log da tentativa de rate limit\n      console.warn(`Rate limit exceeded for user ${userId} in category ${category}`);\n      \n      return res.status(429).json({\n        error: 'Muitas requisições',\n        category,\n        resetTime: result.resetTime\n      });\n    }\n    \n    // Adicionar headers informativos\n    res.set({\n      'X-RateLimit-Category': category,\n      'X-RateLimit-Remaining': result.remaining?.toString() || '0',\n      'X-RateLimit-Reset': result.resetTime?.toString() || '0'\n    });\n    \n    next();\n  };\n};\n\n// Middlewares pré-configurados\nexport const adminActionsRateLimit = createRateLimitMiddleware('admin-actions');\nexport const userManagementRateLimit = createRateLimitMiddleware('user-management');\nexport const systemConfigRateLimit = createRateLimitMiddleware('system-config');\nexport const companyConfigRateLimit = createRateLimitMiddleware('company-config');\nexport const reportsRateLimit = createRateLimitMiddleware('reports');\nexport const profileUpdateRateLimit = createRateLimitMiddleware('profile-update');\nexport const passwordChangeRateLimit = createRateLimitMiddleware('password-change');