/**
 * Exemplo de Uso do Sistema de Ambientes
 * Demonstra como inicializar e usar o sistema de configura√ß√£o de ambientes
 */

import { environmentSystem, initializeEnvironment } from '../config';

/**
 * Exemplo b√°sico de inicializa√ß√£o
 */
export async function basicUsageExample() {
  try {
    console.log('=== Exemplo B√°sico de Uso ===');
    
    // Inicializa o sistema
    const initResult = await initializeEnvironment();
    
    console.log('Resultado da inicializa√ß√£o:', {
      ambiente: initResult.environment,
      conectividade: initResult.connectivity ? 'OK' : 'FALHA',
      banco: initResult.config.databaseName
    });

    // Obt√©m configura√ß√£o atual
    const config = await environmentSystem.getConfig();
    console.log('Configura√ß√£o atual:', {
      nome: config.name,
      url: config.supabaseUrl,
      debug: config.debugMode
    });

  } catch (error) {
    console.error('Erro no exemplo b√°sico:', error);
  }
}

/**
 * Exemplo de verifica√ß√£o de sa√∫de do sistema
 */
export async function healthCheckExample() {
  try {
    console.log('=== Exemplo de Health Check ===');
    
    await initializeEnvironment();
    
    // Executa verifica√ß√£o completa
    const healthCheck = await environmentSystem.performHealthCheck();
    
    console.log('Status geral:', healthCheck.overall.status);
    console.log('Score:', `${healthCheck.overall.score}%`);
    
    console.log('Detalhes dos servi√ßos:');
    console.log('- Database:', healthCheck.database.isConnected ? 'OK' : 'FALHA');
    console.log('- Auth:', healthCheck.auth.isConnected ? 'OK' : 'FALHA');
    console.log('- Storage:', healthCheck.storage.isConnected ? 'OK' : 'FALHA');
    console.log('- Realtime:', healthCheck.realtime.isConnected ? 'OK' : 'FALHA');

  } catch (error) {
    console.error('Erro no health check:', error);
  }
}

/**
 * Exemplo de informa√ß√µes detalhadas do sistema
 */
export async function systemInfoExample() {
  try {
    console.log('=== Informa√ß√µes do Sistema ===');
    
    await initializeEnvironment();
    
    const systemInfo = await environmentSystem.getSystemInfo();
    
    console.log('Informa√ß√µes completas:', {
      ambiente: systemInfo.environment,
      branch: systemInfo.branch,
      banco: systemInfo.database,
      inicializado: systemInfo.initialized,
      statusGeral: systemInfo.connectivity.overall.status
    });

  } catch (error) {
    console.error('Erro ao obter informa√ß√µes do sistema:', error);
  }
}

/**
 * Exemplo de troca de ambiente (para testes)
 */
export async function environmentSwitchExample() {
  try {
    console.log('=== Exemplo de Troca de Ambiente ===');
    
    // Inicializa no ambiente padr√£o
    await initializeEnvironment();
    let config = await environmentSystem.getConfig();
    console.log('Ambiente inicial:', config.name);
    
    // Troca para produ√ß√£o
    environmentSystem.switchEnvironment('production');
    await initializeEnvironment();
    config = await environmentSystem.getConfig();
    console.log('Ap√≥s troca para produ√ß√£o:', config.name);
    
    // Volta para desenvolvimento
    environmentSystem.switchEnvironment('development');
    await initializeEnvironment();
    config = await environmentSystem.getConfig();
    console.log('Ap√≥s volta para desenvolvimento:', config.name);

  } catch (error) {
    console.error('Erro na troca de ambiente:', error);
  }
}

/**
 * Executa todos os exemplos
 */
export async function runAllExamples() {
  console.log('üöÄ Executando exemplos do sistema de ambientes...\n');
  
  await basicUsageExample();
  console.log('\n');
  
  await healthCheckExample();
  console.log('\n');
  
  await systemInfoExample();
  console.log('\n');
  
  await environmentSwitchExample();
  
  console.log('\n‚úÖ Todos os exemplos executados!');
}

// Executa exemplos se arquivo for executado diretamente
if (import.meta.url === `file://${process.argv[1]}`) {
  runAllExamples().catch(console.error);
}