var f=Object.defineProperty;var C=(p,a,t)=>a in p?f(p,a,{enumerable:!0,configurable:!0,writable:!0,value:t}):p[a]=t;var E=(p,a,t)=>C(p,typeof a!="symbol"?a+"":a,t);import{C as n,s as d,I as s}from"./index-CoYpbbJr.js";const m=class m{static getInstance(){return m.instance||(m.instance=new m),m.instance}mapComandaFromSupabase(a,t){return{id:a.id,mesa_id:a.table_id||void 0,cliente_id:a.customer_id||void 0,nome_cliente:a.customer_name||void 0,funcionario_id:a.employee_id,status:this.mapStatusFromSupabase(a.status),total:a.total||0,quantidade_pessoas:a.people_count||1,aberta_em:a.opened_at||a.created_at||new Date().toISOString(),fechada_em:a.closed_at||void 0,observacoes:a.notes||void 0,created_at:a.created_at||new Date().toISOString(),updated_at:a.updated_at||a.created_at||new Date().toISOString(),data_abertura:a.opened_at||a.created_at||new Date().toISOString(),itens:t||[]}}mapStatusFromSupabase(a){switch(a){case"open":return n.ABERTA;case"pending_payment":return n.PENDENTE_PAGAMENTO;case"closed":return n.FECHADA;case"cancelled":return n.CANCELADA;default:return n.ABERTA}}mapStatusToSupabase(a){switch(a){case n.ABERTA:return"open";case n.PENDENTE_PAGAMENTO:return"pending_payment";case n.FECHADA:return"closed";case n.CANCELADA:return"cancelled";default:return"open"}}async getComanda(a){try{const{data:t,error:e}=await d.from("comandas").select(`
          *,
          comanda_items (
            id,
            product_name,
            quantity,
            unit_price,
            total_price,
            status,
            notes,
            created_at
          )
        `).eq("id",a).single();return e?(console.error("Erro ao buscar comanda:",e),null):this.mapComandaFromSupabase(t,t.comanda_items||[])}catch(t){return console.error("Erro ao buscar comanda:",t),null}}async getComandasAbertas(){try{const{data:a,error:t}=await d.from("comandas").select(`
          *,
          comanda_items (
            id,
            product_name,
            quantity,
            unit_price,
            total_price,
            status,
            notes,
            created_at
          )
        `).in("status",["open","pending_payment"]).order("created_at",{ascending:!1});return t?(console.error("Erro ao buscar comandas abertas:",t),[]):a.map(e=>this.mapComandaFromSupabase(e,e.comanda_items||[]))}catch(a){return console.error("Erro ao buscar comandas abertas:",a),[]}}async updateComandaStatus(a,t){try{const e={status:this.mapStatusToSupabase(t),updated_at:new Date().toISOString()};t===n.FECHADA&&(e.closed_at=new Date().toISOString());const{error:r}=await d.from("comandas").update(e).eq("id",a);return r?(console.error("Erro ao atualizar status da comanda:",r),!1):!0}catch(e){return console.error("Erro ao atualizar status da comanda:",e),!1}}mapCashSessionFromSupabase(a){return{id:a.id,operator_id:a.employee_id,opened_at:a.opened_at||a.created_at||new Date().toISOString(),closed_at:a.closed_at||void 0,initial_amount:a.initial_amount||0,status:a.status==="closed"?"closed":"open",transactions:[],cash_movements:[],expected_amount:a.expected_amount||0,actual_amount:a.actual_amount||0,discrepancy:a.cash_discrepancy||0}}async getCurrentCashSession(){try{const{data:a,error:t}=await d.from("cash_sessions").select("*").eq("status","open").order("created_at",{ascending:!1}).limit(1).single();return t?(t.code==="PGRST116"||console.error("Erro ao buscar sessão de caixa atual:",t),null):this.mapCashSessionFromSupabase(a)}catch(a){return console.error("Erro ao buscar sessão de caixa atual:",a),null}}async openCashSession(a,t){try{const e={employee_id:t,initial_amount:a,expected_amount:a,actual_amount:0,cash_discrepancy:0,status:"open",opened_at:new Date().toISOString(),created_at:new Date().toISOString()},{data:r,error:o}=await d.from("cash_sessions").insert(e).select().single();return o?(console.error("Erro ao abrir sessão de caixa:",o),null):this.mapCashSessionFromSupabase(r)}catch(e){return console.error("Erro ao abrir sessão de caixa:",e),null}}async closeCashSession(a,t){try{const{error:e}=await d.from("cash_sessions").update({status:"closed",actual_amount:t,closed_at:new Date().toISOString(),updated_at:new Date().toISOString()}).eq("id",a);return e?(console.error("Erro ao fechar sessão de caixa:",e),!1):!0}catch(e){return console.error("Erro ao fechar sessão de caixa:",e),!1}}async createPaymentTransaction(a,t,e,r,o,c){try{const i={cash_session_id:a,comanda_id:t,transaction_type:"sale",amount:e,payment_method:r,processed_by:o,processed_at:new Date().toISOString(),notes:c,created_at:new Date().toISOString()},{data:u,error:_}=await d.from("cash_transactions").insert(i).select("id").single();return _?(console.error("Erro ao criar transação:",_),null):u.id}catch(i){return console.error("Erro ao criar transação:",i),null}}async getSessionTransactions(a){try{const{data:t,error:e}=await d.from("cash_transactions").select("*").eq("cash_session_id",a).order("created_at",{ascending:!1});return e?(console.error("Erro ao buscar transações:",e),[]):t.map(r=>({id:r.id,type:r.transaction_type,amount:r.amount,payment_method:r.payment_method,command_id:r.comanda_id||void 0,cash_session_id:r.cash_session_id,processed_at:r.processed_at||r.created_at||new Date().toISOString(),processed_by:r.processed_by,observations:r.notes||void 0}))}catch(t){return console.error("Erro ao buscar transações:",t),[]}}async createPaymentPending(a,t,e,r,o,c,i){try{const u={comanda_id:a,cash_session_id:c,expected_amount:t,commission_percentage:e,commission_amount:r,payment_method:o,status:"pending",notes:i,created_at:new Date().toISOString()},{data:_,error:w}=await d.from("payment_reconciliation").insert(u).select("id").single();return w?(console.error("Erro ao criar pendência:",w),null):_.id}catch(u){return console.error("Erro ao criar pendência:",u),null}}async getPendingPayments(a){try{let t=d.from("payment_reconciliation").select("*").eq("status","pending");a&&(t=t.eq("cash_session_id",a));const{data:e,error:r}=await t.order("created_at",{ascending:!1});return r?(console.error("Erro ao buscar pendências:",r),[]):e.map(o=>({id:o.id,command_id:o.comanda_id||"",amount:o.expected_amount||0,commission_percentage:o.commission_percentage||0,commission_amount:o.commission_amount||0,payment_method:o.payment_method,status:"pending",created_at:o.created_at||new Date().toISOString(),observations:o.notes||void 0,cash_session_id:o.cash_session_id||""}))}catch(t){return console.error("Erro ao buscar pendências:",t),[]}}async processPendingPayment(a,t){try{const{error:e}=await d.from("payment_reconciliation").update({status:"processed",transaction_id:t,processed_at:new Date().toISOString(),updated_at:new Date().toISOString()}).eq("id",a);return e?(console.error("Erro ao processar pendência:",e),!1):!0}catch(e){return console.error("Erro ao processar pendência:",e),!1}}};E(m,"instance");let h=m;const l=class l{constructor(){E(this,"supabaseIntegration");E(this,"comandasAbertas",new Map);E(this,"proximoNumero",1);this.supabaseIntegration=h.getInstance(),this.loadComandasAbertas()}static getInstance(){return l.instance||(l.instance=new l),l.instance}async loadComandasAbertas(){try{const a=await this.supabaseIntegration.getComandasAbertas();this.comandasAbertas.clear(),a.forEach(t=>{this.comandasAbertas.set(t.id,t)})}catch(a){console.error("Erro ao carregar comandas abertas:",a)}}async criarComanda(a){const t=new Date().toISOString(),e=this.gerarNumeroComanda(),r={id:e,mesa_id:a.mesa_id,cliente_id:a.cliente_id,nome_cliente:a.nome_cliente,funcionario_id:a.funcionario_id,status:n.ABERTA,total:0,quantidade_pessoas:a.quantidade_pessoas,aberta_em:t,data_abertura:t,observacoes:a.observacoes,created_at:t,updated_at:t,itens:[]};return this.comandasAbertas.set(e,r),r}async buscarComanda(a){const t=this.comandasAbertas.get(a);if(t)return t;try{const e=await this.supabaseIntegration.getComanda(a);if(e)return this.comandasAbertas.set(a,e),e}catch(e){console.error("Erro ao buscar comanda no banco:",e)}}async listarComandasAbertas(){try{return await this.loadComandasAbertas(),Array.from(this.comandasAbertas.values()).filter(a=>a.status===n.ABERTA||a.status===n.PENDENTE_PAGAMENTO)}catch(a){return console.error("Erro ao listar comandas abertas:",a),Array.from(this.comandasAbertas.values()).filter(t=>t.status===n.ABERTA||t.status===n.PENDENTE_PAGAMENTO)}}async atualizarComanda(a,t){const e=await this.buscarComanda(a);if(!e)throw new Error(`Comanda ${a} não encontrada`);if(e.status===n.FECHADA)throw new Error("Não é possível atualizar uma comanda fechada");const r={...e,...t,updated_at:new Date().toISOString()};return this.comandasAbertas.set(a,r),r}async adicionarItem(a,t){const e=await this.buscarComanda(a);if(!e)throw new Error(`Comanda ${a} não encontrada`);if(e.status!==n.ABERTA)throw new Error("Só é possível adicionar itens em comandas abertas");const r=new Date().toISOString(),c={id:this.gerarIdItem(),comanda_id:a,produto_id:t.produto_id,nome_produto:t.nome_produto,quantidade:t.quantidade,preco_unitario:t.preco_unitario,preco_total:t.quantidade*t.preco_unitario,status:s.PENDENTE,adicionado_em:r,observacoes:t.observacoes,created_at:r};return e.itens||(e.itens=[]),e.itens.push(c),await this.recalcularTotalComanda(a),c}async removerItem(a,t){var c;const e=await this.buscarComanda(a);if(!e)throw new Error(`Comanda ${a} não encontrada`);if(e.status!==n.ABERTA)throw new Error("Só é possível remover itens de comandas abertas");const r=(c=e.itens)==null?void 0:c.findIndex(i=>i.id===t);if(r===void 0||r===-1)throw new Error(`Item ${t} não encontrado na comanda`);const o=e.itens[r];if(o.status===s.PREPARANDO||o.status===s.PRONTO)throw new Error("Não é possível remover itens que já estão sendo preparados");return e.itens.splice(r,1),await this.recalcularTotalComanda(a),!0}async atualizarStatusItem(a,t,e){var u;const r=await this.buscarComanda(a);if(!r)throw new Error(`Comanda ${a} não encontrada`);const o=(u=r.itens)==null?void 0:u.find(_=>_.id===t);if(!o)throw new Error(`Item ${t} não encontrado na comanda`);console.log(`Atualizando status do item ${o.nome_produto}: ${o.status} -> ${e}`),this.validarTransicaoStatus(o.status,e);const c=o.status;o.status=e;const i=new Date().toISOString();switch(e){case s.PREPARANDO:o.preparacao_iniciada_em=i;break;case s.PRONTO:o.preparado_em=i;break;case s.ENTREGUE:o.entregue_em=i;break;case s.CANCELADO:o.cancelado_em=i;break}return console.log(`Item ${o.nome_produto} atualizado: ${c} -> ${e}`),o}async associarMesa(a,t){return await this.atualizarComanda(a,{mesa_id:t})}async associarCliente(a,t,e){return await this.atualizarComanda(a,{cliente_id:t,nome_cliente:e})}async marcarComoPendentePagamento(a){const t=await this.buscarComanda(a);if(!t)throw new Error(`Comanda ${a} não encontrada`);if(t.status===n.FECHADA)throw new Error("Comanda já está fechada");if(!await this.supabaseIntegration.updateComandaStatus(a,n.PENDENTE_PAGAMENTO))throw new Error("Erro ao atualizar status da comanda no banco");return t.status=n.PENDENTE_PAGAMENTO,t.updated_at=new Date().toISOString(),this.comandasAbertas.set(a,t),t}async fecharComanda(a){var o;const t=await this.buscarComanda(a);if(!t)throw new Error(`Comanda ${a} não encontrada`);if(t.status!==n.ABERTA)throw new Error("Só é possível fechar comandas abertas");const e=(o=t.itens)==null?void 0:o.filter(c=>c.status===s.PENDENTE||c.status===s.PREPARANDO);if(e&&e.length>0)throw new Error("Não é possível fechar comanda com itens pendentes ou em preparo");return await this.atualizarComanda(a,{status:n.PENDENTE_PAGAMENTO,fechada_em:new Date().toISOString()})}async cancelarComanda(a,t){const e=await this.buscarComanda(a);if(!e)throw new Error(`Comanda ${a} não encontrada`);if(e.status===n.FECHADA)throw new Error("Não é possível cancelar uma comanda já fechada");if(e.itens)for(const o of e.itens)o.status!==s.ENTREGUE&&(o.status=s.CANCELADO);return await this.atualizarComanda(a,{status:n.CANCELADA,observacoes:t?`${e.observacoes||""}
Cancelada: ${t}`:e.observacoes})}async recalcularTotalComanda(a){const t=await this.buscarComanda(a);if(!t||!t.itens)return;const e=t.itens.filter(r=>r.status!==s.CANCELADO).reduce((r,o)=>r+o.preco_total,0);await this.atualizarComanda(a,{total:e})}gerarNumeroComanda(){const a=this.proximoNumero++,t=Date.now().toString().slice(-6);return`CMD${a.toString().padStart(4,"0")}-${t}`}gerarIdItem(){return`ITEM-${Date.now()}-${Math.random().toString(36).substr(2,9)}`}validarTransicaoStatus(a,t){const r={[s.PENDENTE]:[s.PREPARANDO,s.PRONTO,s.ENTREGUE,s.CANCELADO],[s.PREPARANDO]:[s.PRONTO,s.ENTREGUE,s.CANCELADO],[s.PRONTO]:[s.ENTREGUE,s.CANCELADO,s.PREPARANDO],[s.ENTREGUE]:[s.CANCELADO],[s.CANCELADO]:[]}[a];(!r||!r.includes(t))&&console.warn(`Transição de status questionável: ${a} -> ${t}, mas permitindo para comandas`)}static converterItensCarrinho(a){return a.map(t=>({produto_id:t.produto_id,nome_produto:t.nome_produto,quantidade:t.quantidade,preco_unitario:t.preco_unitario,observacoes:t.observacoes}))}async obterEstatisticas(){const a=await this.listarComandasAbertas(),t=a.reduce((r,o)=>{var c;return r+(((c=o.itens)==null?void 0:c.filter(i=>i.status===s.PENDENTE||i.status===s.PREPARANDO).length)||0)},0),e=a.reduce((r,o)=>r+o.total,0);return{total_comandas_abertas:a.length,total_itens_pendentes:t,valor_total_comandas_abertas:e}}async createCommand(a){const t=await this.criarComanda({funcionario_id:a.garcom_id,quantidade_pessoas:1,observacoes:a.mesa?`Mesa ${a.mesa.numero}`:void 0});return a.mesa&&(t.mesa={numero:a.mesa.numero}),t}async getOpenCommands(){return await this.listarComandasAbertas()}async addItemToCommand(a,t){return await this.adicionarItem(a,t)}async updateItemStatus(a,t,e){return await this.atualizarStatusItem(a,t,e)}async closeCommand(a){return await this.fecharComanda(a)}};E(l,"instance");let A=l;export{A as CommandManager};
