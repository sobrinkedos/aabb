#!/usr/bin/env node\n\nimport fs from 'fs';\nimport path from 'path';\nimport { fileURLToPath } from 'url';\n\nconst __filename = fileURLToPath(import.meta.url);\nconst __dirname = path.dirname(__filename);\n\nconsole.log('üöÄ Script de Aplica√ß√£o de Todas as Migra√ß√µes do Sistema Multitenant');\nconsole.log('====================================================================');\n\n// Lista de migra√ß√µes necess√°rias em ordem\nconst migrations = [\n  {\n    file: '20250116000001_multitenant_auth_system.sql',\n    name: 'Sistema Base Multitenant',\n    description: 'Tabelas principais, RLS e estrutura base'\n  },\n  {\n    file: '20250119000001_add_admin_hierarchy.sql',\n    name: 'Hierarquia Administrativa',\n    description: 'Pap√©is, privil√©gios e primeiro usu√°rio'\n  },\n  {\n    file: '20250119000002_update_rls_policies_hierarchy.sql',\n    name: 'Pol√≠ticas RLS Hier√°rquicas',\n    description: 'Controle de acesso baseado em hierarquia'\n  },\n  {\n    file: '20250120000001_complete_admin_hierarchy_features.sql',\n    name: 'Funcionalidades Complementares',\n    description: 'Logs, sess√µes e funcionalidades avan√ßadas'\n  }\n];\n\nconsole.log('üìã MIGRA√á√ïES A SEREM APLICADAS:');\nconsole.log('');\n\nlet allMigrationsFound = true;\nconst migrationContents = [];\n\n// Verificar se todas as migra√ß√µes existem\nfor (let i = 0; i < migrations.length; i++) {\n  const migration = migrations[i];\n  const migrationPath = path.join(__dirname, 'supabase', 'migrations', migration.file);\n  \n  console.log(`${i + 1}Ô∏è‚É£  ${migration.name}`);\n  console.log(`    üìÅ ${migration.file}`);\n  console.log(`    üìù ${migration.description}`);\n  \n  if (fs.existsSync(migrationPath)) {\n    const content = fs.readFileSync(migrationPath, 'utf8');\n    const lines = content.split('\\n').length;\n    console.log(`    ‚úÖ Encontrada (${lines.toLocaleString()} linhas)`);\n    migrationContents.push({ ...migration, content, path: migrationPath });\n  } else {\n    console.log(`    ‚ùå N√ÉO ENCONTRADA em: ${migrationPath}`);\n    allMigrationsFound = false;\n  }\n  console.log('');\n}\n\nif (!allMigrationsFound) {\n  console.log('‚ùå ERRO: Algumas migra√ß√µes n√£o foram encontradas!');\n  console.log('üí° Verifique se todos os arquivos est√£o no diret√≥rio supabase/migrations/');\n  process.exit(1);\n}\n\nconsole.log('‚úÖ Todas as migra√ß√µes encontradas!');\nconsole.log('');\n\nconsole.log('üéØ STATUS: MCP do Supabase em modo somente leitura');\nconsole.log('üí° SOLU√á√ÉO: Aplica√ß√£o manual via dashboard');\nconsole.log('');\n\nconsole.log('üìã INSTRU√á√ïES PASSO A PASSO:');\nconsole.log('');\nconsole.log('1Ô∏è‚É£  ACESSE O DASHBOARD DO SUPABASE:');\nconsole.log('    üîó https://supabase.com/dashboard/project/[SEU_PROJECT_ID]/sql');\nconsole.log('');\nconsole.log('2Ô∏è‚É£  ABRA O SQL EDITOR:');\nconsole.log('    ‚Ä¢ Clique na aba \"SQL Editor\" no menu lateral');\nconsole.log('    ‚Ä¢ Clique em \"New Query\" para criar uma nova consulta');\nconsole.log('');\nconsole.log('3Ô∏è‚É£  APLIQUE AS MIGRA√á√ïES EM ORDEM:');\nconsole.log('');\n\nfor (let i = 0; i < migrationContents.length; i++) {\n  const migration = migrationContents[i];\n  console.log(`   ${i + 1}. ${migration.name}:`);\n  console.log(`      ‚Ä¢ Copie o conte√∫do de: ${migration.file}`);\n  console.log(`      ‚Ä¢ Cole no SQL Editor`);\n  console.log(`      ‚Ä¢ Execute (RUN ou Ctrl+Enter)`);\n  console.log(`      ‚Ä¢ Aguarde conclus√£o antes de prosseguir`);\n  console.log('');\n}\n\nconsole.log('4Ô∏è‚É£  VERIFIQUE O RESULTADO:');\nconsole.log('    ‚Ä¢ Execute: node check-migration.js');\nconsole.log('    ‚Ä¢ Deve mostrar \"‚úÖ Todas as migra√ß√µes aplicadas!\"');\nconsole.log('');\n\nconsole.log('üèóÔ∏è  O QUE SER√Å CRIADO:');\nconsole.log('');\nconsole.log('üìä TABELAS:');\nconsole.log('   ‚Ä¢ empresas              - Dados das empresas');\nconsole.log('   ‚Ä¢ usuarios_empresa      - Usu√°rios vinculados a empresas');\nconsole.log('   ‚Ä¢ permissoes_usuario    - Permiss√µes por m√≥dulo');\nconsole.log('   ‚Ä¢ configuracoes_empresa - Configura√ß√µes por categoria');\nconsole.log('   ‚Ä¢ logs_auditoria        - Logs de seguran√ßa e auditoria');\nconsole.log('   ‚Ä¢ sessoes_ativas        - Controle de sess√µes (opcional)');\nconsole.log('');\nconsole.log('üîê HIERARQUIA DE PAP√âIS:');\nconsole.log('   ‚Ä¢ SUPER_ADMIN          - Acesso total (primeiro usu√°rio)');\nconsole.log('   ‚Ä¢ ADMIN                - Acesso administrativo limitado');\nconsole.log('   ‚Ä¢ MANAGER              - Gest√£o de usu√°rios e relat√≥rios');\nconsole.log('   ‚Ä¢ USER                 - Acesso b√°sico aos m√≥dulos');\nconsole.log('');\nconsole.log('‚öôÔ∏è  FUNCIONALIDADES:');\nconsole.log('   ‚Ä¢ üîÑ Triggers autom√°ticos para primeiro usu√°rio');\nconsole.log('   ‚Ä¢ üîí Pol√≠ticas RLS baseadas em hierarquia');\nconsole.log('   ‚Ä¢ üìù Logging autom√°tico de a√ß√µes cr√≠ticas');\nconsole.log('   ‚Ä¢ üö´ Controle de tentativas de login');\nconsole.log('   ‚Ä¢ üìä Estat√≠sticas para dashboard administrativo');\nconsole.log('');\n\nconsole.log('‚ö†Ô∏è  ORDEM IMPORTANTE:');\nconsole.log('   ‚ö° As migra√ß√µes DEVEM ser aplicadas na ordem listada!');\nconsole.log('   ‚ö° N√£o pule nenhuma migra√ß√£o!');\nconsole.log('   ‚ö° Aguarde cada migra√ß√£o terminar antes da pr√≥xima!');\nconsole.log('');\n\nconsole.log('üîÑ AP√ìS APLICAR TODAS AS MIGRA√á√ïES:');\nconsole.log('   1. Execute: node check-migration.js');\nconsole.log('   2. Atualize os hooks de autentica√ß√£o no frontend');\nconsole.log('   3. Reinicie o servidor: npm run dev');\nconsole.log('   4. Teste o registro de nova empresa');\nconsole.log('   5. Teste login com diferentes pap√©is');\nconsole.log('');\n\nconsole.log('üêõ RESOLU√á√ÉO DE PROBLEMAS:');\nconsole.log('   ‚Ä¢ Se uma migra√ß√£o falhar, N√ÉO continue com as pr√≥ximas');\nconsole.log('   ‚Ä¢ Verifique a mensagem de erro espec√≠fica');\nconsole.log('   ‚Ä¢ Algumas migra√ß√µes podem ser executadas novamente (s√£o idempotentes)');\nconsole.log('   ‚Ä¢ Em caso de d√∫vida, execute linha por linha');\nconsole.log('');\n\nconsole.log('üìÑ CONTE√öDO DAS MIGRA√á√ïES:');\nconsole.log('====================================================================');\n\n// Mostrar o conte√∫do de todas as migra√ß√µes\nfor (const migration of migrationContents) {\n  console.log('');\n  console.log(`üîπ ${migration.name} (${migration.file})`);\n  console.log('--------------------------------------------------------------------');\n  console.log(migration.content);\n  console.log('--------------------------------------------------------------------');\n}\n\nconsole.log('');\nconsole.log('üéâ TODAS AS MIGRA√á√ïES PRONTAS PARA APLICA√á√ÉO!');\nconsole.log('====================================================================');\nconsole.log('');"